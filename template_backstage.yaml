apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: reply-platform-intership
  title: Create Cluster (Reply)
  description: Create the security perimeter for the platform microservice
spec:
  owner: ro.distefano
  type: job
  parameters:
    - title: Configuration Options
      required:
        - awsRegion
        - clusterName
        - awsAccountId
        - vpcId
      properties:
        awsAccountId:
          title: Enter AWS account ID to use
          type: string
          description: your AWS account ID
        clusterName:
          title: Enter cluster name to create
          type: string
          description: repositories/cluster name
        eksVersion:
          title: Enter EKS version to use
          type: string
          default: "1.29"
          enum:
            - "1.28"
            - "1.29"
          enumNames:
            - "1.28"
            - "1.29"
          description: EKS version to use
        awsRegion:
          title: Enter AWS region to use
          type: string
          default: eu-west-1
          description: AWS region to use
        environmentTag:
          title: Enter environment
          type: string
          default: testing
          enum:
            - development
            - quality
            - production
            - testing
          enumNames:
            - 'development'
            - 'quality'
            - 'production'
            - 'testing'
        vpcId:
          title: Enter ID of the vpc my
          type: string
          description: ID of the vpc where deploy the cluster
        feSubnetIds:
          title: Enter IDs of the frontend subnets
          description:  IDs of the frontend subnets where deploy the load balancers
          type: array
          minItems: 0
          ui:options:
            addable: true
            removable: true
          items:
            title: Enter ID of the frontend subnet
            description: ID of the frontend subnet where deploy the data nodes
            type: string
        beSubnetIds:
          title: Enter IDs of the backend subnets
          description: ID of the backend subnets where deploy the data nodes
          type: array
          minItems: 0
          ui:options:
            addable: true
            removable: true
          items:
            title: Enter ID of the backend subnet
            description: ID of the backend subnet where deploy the data nodes
            type: string
        securityGroupIds:
          title: Enter IDs of the security groups
          description: IDs of the security groups
          type: array
          minItems: 0
          ui:options:
            addable: true
            removable: true
          items:
            title: Enter ID of the security group
            description: ID of the security group
            type: string

  steps:
    # Create controlplane repository
    - id: create-repo-controlplane
      name: Create controlplane repository
      action: github:repo:create
      input:
        repoUrl: github.com?owner=CNOE-ORG-TEST&repo=${{ parameters.clusterName }}-${{ parameters.environmentTag }}Controlplane&organization=CNOE-ORG-TEST

    # Create dataplane repository
    - id: create-repo-dataplane
      name: Create dataplane repository
      action: github:repo:create
      input:
        repoUrl: github.com?owner=CNOE-ORG-TEST&repo=${{ parameters.clusterName }}-${{ parameters.environmentTag }}Dataplane&organization=CNOE-ORG-TEST

    # Create infrplane repository
    - id: create-repo-infrplane
      name: Create infrplane repository
      action: github:repo:create
      input:
        repoUrl: github.com?owner=CNOE-ORG-TEST&repo=${{ parameters.clusterName }}-${{ parameters.environmentTag }}Infrplane&organization=CNOE-ORG-TEST

    # Set value to parameters
    - id: fetch-applicative-template
      name: Fetch Applicative Template
      action: fetch:template
      input:
        url: ./applicative-template/
        targetPath: ./applicative-template-compiled/
        values:
          clusterName: "${{ parameters.clusterName }}-${{ parameters.environmentTag }}"
          eksVersion: ${{ parameters.eksVersion }}
          region: ${{ parameters.awsRegion }}
          awsAccountId: ${{ parameters.awsAccountId }}
          environmentTag: ${{ parameters.environmentTag }}
          feSubnetIds: ${{ parameters.feSubnetIds }}
          beSubnetIds: ${{ parameters.beSubnetIds }}
          securityGroupIds: ${{ parameters.securityGroupIds}}
          vpcId: ${{ parameters.vpcId }}

    # Push files to controlplane repository
    - id: init-controlplane-repo
      name: Initialize controlplane repository
      action: github:repo:push
      input:
        repoUrl: github.com?owner=CNOE-ORG-TEST&repo=${{ parameters.clusterName }}-${{ parameters.environmentTag }}Controlplane&organization=CNOE-ORG-TEST
        defaultBranch: main
        sourcePath: ./applicative-template-compiled/controlplane

    # Push files to dataplane repository
    - id: init-dataplane-repo
      name: Initialize dataplane repository
      action: github:repo:push
      input:
        repoUrl: github.com?owner=CNOE-ORG-TEST&repo=${{ parameters.clusterName }}-${{ parameters.environmentTag }}Dataplane&organization=CNOE-ORG-TEST
        defaultBranch: main
        sourcePath: ./applicative-template-compiled/dataplane

    # Push files to infrplane repository
    - id: init-infrplane-repo
      name: Initialize infrplane repository
      action: github:repo:push
      input:
        repoUrl: github.com?owner=CNOE-ORG-TEST&repo=${{ parameters.clusterName }}-${{ parameters.environmentTag }}Infrplane&organization=CNOE-ORG-TEST
        defaultBranch: main
        sourcePath: ./applicative-template-compiled/infrplane

    # Apply controlplane workflow
    - id: apply-variables-cm
      name: Apply configmap with variables used from all pipelines
      action: cnoe:kubernetes:apply
      input:
        manifestPath: ./applicative-template-compiled/common-variables/variables.yaml
        namespaced: true
        clusterName: local

    # Waiting for the repo to be ready
    - id: wait
      name: Waiting for the repo to be ready
      action: "roadiehq:utils:sleep"
      input:
        amount: 5

    # Apply controlplane workflow
    - id: apply-controlplane-workflow
      name: Apply controlplane workflow
      action: cnoe:kubernetes:apply
      input:
        manifestPath: ./applicative-template-compiled/workflow/controlplaneWorkflow.yaml
        namespaced: true
        clusterName: local

    # Apply dataplane workflow
    #- id: apply-dataplane-workflow
    #  name: Apply dataplane workflow
    #  action: cnoe:kubernetes:apply
    #  input:
    #    manifestPath: ./applicative-template/workflow/dataplaneWorkflow.yaml
    #    namespaced: true
    #    clusterName: local
        #clusterName: cnoe-test-cluster

    # Apply infrplane workflow
    #- id: apply-infrplane-workflow
    #  name: Apply infrplane workflow
    #  action: cnoe:kubernetes:apply
    #  input:
    #    manifestPath: ./applicative-template/workflow/infrplaneWorkflow.yaml
    #    namespaced: true
    #    clusterName: local

    - id: register-controlplane-workflow
      name: Register workflow
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps['init-controlplane-repo'].output.repoContentsUrl }}
        catalogInfoPath: "/catalog-info-workflow.yaml"

    # - id: register-cd
    #   name: Register cd
    #   action: catalog:register
    #   input:
    #     repoContentsUrl: ${{ steps['init-applicative-repo'].output.repoContentsUrl }}
    #     catalogInfoPath: "/catalog-info-cd.yaml"