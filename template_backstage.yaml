apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: reply-platform-intership
  title: Create Cluster (Reply)
  description: Create the security perimeter for the platform microservice
spec:
  owner: ro.distefano
  type: job
  parameters:
    - title: Controlplane parameters
      required:
        - clusterName
        - awsAccountId
        - vpcId
      properties:
        awsAccountId:
          title: Enter AWS account ID to use
          type: string
          description: your AWS account ID
          pattern: '^\d{12}$'
        clusterName:
          title: Enter cluster name to create
          type: string
          pattern: '^([a-z0-9]+)(-[a-z0-9]+)*$'
          description: repositories/cluster name
        eksVersion:
          title: Enter EKS version to use
          type: string
          default: "1.29"
          enum:
            - "1.28"
            - "1.29"
          enumNames:
            - "1.28"
            - "1.29"
          description: EKS version to use
        awsRegion:
          title: Enter AWS region to use
          type: string
          default: eu-west-1
          description: AWS region to use
          enum:
            - eu-west-1
            - eu-west-2
            - eu-west-3
            - eu-central-1
            - eu-central-2
            - eu-south-1
            - eu-south-2
            - eu-north-1
            - us-east-1
            - us-east-2
            - us-west-1
            - us-west-2
          enumNames:
            - "eu-west-1"
            - "eu-west-2"
            - "eu-west-3"
            - "eu-central-1"
            - "eu-central-2"
            - "eu-south-1"
            - "eu-south-2"
            - "eu-north-1"
            - "us-east-1"
            - "us-east-2"
            - "us-west-1"
            - "us-west-2"
        environmentTag:
          title: Enter environment
          type: string
          default: testing
          enum:
            - development
            - quality
            - production
            - testing
          enumNames:
            - 'development'
            - 'quality'
            - 'production'
            - 'testing'
        vpcId:
          title: Enter ID of the vpc my
          type: string
          description: ID of the vpc where deploy the cluster
          pattern: '^vpc-[a-f0-9]{8,17}$'
        feSubnetIds:
          title: Enter IDs of the frontend subnets
          description:  IDs of the frontend subnets where deploy the load balancers
          type: array
          minItems: 3
          ui:options:
            addable: true
            removable: true
          items:
            title: Enter ID of the frontend subnet
            description: ID of the frontend subnet where deploy the data nodes
            type: string
            pattern: "^subnet-[a-f0-9]{8,17}$"
        beSubnetIds:
          title: Enter IDs of the backend subnets
          description: ID of the backend subnets where deploy the data nodes
          type: array
          minItems: 3
          ui:options:
            addable: true
            removable: true
          items:
            title: Enter ID of the backend subnet
            description: ID of the backend subnet where deploy the data nodes
            type: string
            pattern: "^subnet-[a-f0-9]{8,17}$"
        securityGroupIds:
          title: Enter IDs of the security groups
          description: IDs of the security groups
          type: array
          minItems: 1
          ui:options:
            addable: true
            removable: true
          items:
            title: Enter ID of the security group
            description: ID of the security group
            type: string
            pattern: "^sg-[a-f0-9]{8,17}$"

    - title: Dataplane parameters
      required:
        - nodeGroupName
      properties:
        nodeGroupName:
          title: Enter node group name
          type: string
          description: it will add as tag and used for CloudFormation name
        keyName:
          title: Enter instances access key
          type: string
          description: name of the aws pem access key useful to access with ssh to the nodes
        nodeMin:
          title: Enter the minimum number of instances
          type: integer
          description: minimum number of instances to run
        nodeMax:
          title: Enter the maximum number of instances
          type: integer
          description: maximum number of instances to run
        nodeDesidered:
          title: Enter the desidered number of instances
          type: integer
          description: desired number of instances to run
        volumeType:
          title: Enter the type of the volume
          type: string
          description: type of the volume attach to nodes
          default: gp3
          enum:
            - gp2
            - gp3
          enumNames:
            - 'gp2'
            - 'gp3'
        volumeSize:
          title: Enter the size of the volume
          type: string
          description: size of the volume attach to nodes
        volumeIOPS:
          title: Enter the input/output rate of the volume
          type: string
          description: input/output rate of the volume attach to nodes
        isSpot:
          title: Set if the instances are or not spot instances
          default: 'false'
          type: string
          enum:
            - 'true'
            - 'false'
          enumNames:
            - 'Yes'
            - 'No'
          uniqueItems: true
          ui:widget: radio
        isGraviton:
          title: Set if the instances are or not graviton
          default: 'false'
          type: string
          enum:
            - 'true'
            - 'false'
          enumNames:
            - 'Yes'
            - 'No'
          uniqueItems: true
          ui:widget: radio
        isGpu:
          title: Set if the instances have or not GPU
          default: 'false'
          type: string
          enum:
            - 'true'
            - 'false'
          enumNames:
            - 'Yes'
            - 'No'
          uniqueItems: true
          ui:widget: radio
        taints:
          title: Enter taints of the group node
          description: taints are useful to specify pod that can't be scheduled in this group node
          type: array
          minItems: 0
          ui:options:
            addable: true
            removable: true
          items:
            title: Enter a taint
            description: taint is useful to specify pod that can't be scheduled in this group node
            type: string
        labels:
          title: Enter labels of the group node
          description: labels are useful to specify in witch node a pod have to be scheduled
          type: array
          minItems: 1
          ui:options:
            addable: true
            removable: true
          items:
            title: Enter a label
            description: labels are useful to specify in witch node a pod have to be scheduled
            type: string

    - title: Infrplane parameters
      properties:
        enableClusterAutoscaler:
          title: "Deploy or not autoscaler plugin"
          description: autoscaler plugin allow to scale automatically cluster number of nodes
          default: 'true'
          type: string
          enum:
            - 'true'
            - 'false'
          enumNames:
            - 'Yes'
            - 'No'
          uniqueItems: true
          ui:widget: radio

        enableMetricServer:
          title: Deploy or not metric plugin
          description: metric plugin allow to monitor nodes/pods resource usage
          default: 'true'
          type: string
          enum:
            - 'true'
            - 'false'
          enumNames:
            - 'Yes'
            - 'No'
          uniqueItems: true
          ui:widget: radio

        enableCoredns:
          title: Deploy or not coredns
          description: coredns it's a powerfull dns server
          default: 'true'
          type: string
          enum:
            - 'true'
            - 'false'
          enumNames:
            - 'Yes'
            - 'No'
          uniqueItems: true
          ui:widget: radio

        enableAwsCni:
          title: Deploy or not AWS CNI
          description: AWS CNI it's a useful Kubernetes plugin to assign AWS VPC IP to containers
          default: 'true'
          type: string
          enum:
            - 'true'
            - 'false'
          enumNames:
            - 'Yes'
            - 'No'
          uniqueItems: true
          ui:widget: radio
  #     dependencies:
  #      clusterAutoscaler:
  #        allOf:
  #          - if:
  #              properties:
  #                clusterAutoscaler:
  #                  const: "true"
  #            then:
  #              properties:
  #                clusterAutoscalerExpanderType:
  #                  title: Enter the type of the autoscaler expander
  #                  type: string
  #                  description: expander determines the logic used to choice new node
  #                  default: least-waste
  #                  enum:
  #                    - least-waste
  #                    - random
  #                    - most-pods
  #                    - priority
  #                  enumNames:
  #                    - 'least-waste'
  #                    - 'random'
  #                    - 'most-pods'
  #                    - 'priority'
#
#                  clusterAutoscalerDowntime:
#                    title: Enter autoscaler downtime
#                    type: string
#                    default: "10"
#                    pattern: "^[0-9]*$"
#                    description: the autoscaler downtime it's the minimum time between two downscale


  steps:
    # Create controlplane repository
    - id: create-repo-controlplane
      name: Create controlplane repository
      action: github:repo:create
      input:
        repoUrl: github.com?owner=CNOE-ORG-TEST&repo=${{ parameters.clusterName }}-${{ parameters.environmentTag }}Controlplane&organization=CNOE-ORG-TEST

    # Create dataplane repository
    - id: create-repo-dataplane
      name: Create dataplane repository
      action: github:repo:create
      input:
        repoUrl: github.com?owner=CNOE-ORG-TEST&repo=${{ parameters.clusterName }}-${{ parameters.environmentTag }}Dataplane&organization=CNOE-ORG-TEST

    # Create infrplane repository
    - id: create-repo-infrplane
      name: Create infrplane repository
      action: github:repo:create
      input:
        repoUrl: github.com?owner=CNOE-ORG-TEST&repo=${{ parameters.clusterName }}-${{ parameters.environmentTag }}Infrplane&organization=CNOE-ORG-TEST

    # Set value to parameters
    - id: fetch-applicative-template
      name: Fetch Applicative Template
      action: fetch:template
      input:
        url: ./applicative-template/
        targetPath: ./applicative-template-compiled/
        values:
          clusterName: "${{ parameters.clusterName }}-${{ parameters.environmentTag }}"
          eksVersion: ${{ parameters.eksVersion }}
          region: ${{ parameters.awsRegion }}
          awsAccountId: ${{ parameters.awsAccountId }}
          environmentTag: ${{ parameters.environmentTag }}
          feSubnetIds: ${{ parameters.feSubnetIds }}
          beSubnetIds: ${{ parameters.beSubnetIds }}
          securityGroupIds: ${{ parameters.securityGroupIds}}
          vpcId: ${{ parameters.vpcId }}
          nodeGroupName: ${{ parameters.nodeGroupName }}
          volumeType: ${{ parameters.volumeType }}
          volumeSize: ${{ parameters.volumeSize }}
          volumeIOPS: ${{ parameters.volumeIOPS }}
          isSpot: ${{ parameters.isSpot }}
          isGravitation: ${{ parameters.isGravitation }}
          isGpu: ${{ parameters.isGpu }}
          taints: ${{ parameters.taints }}
          labels: ${{ parameters.labels }}
          keyName: ${{ parameters.keyName }}
          nodeMin: ${{ parameters.nodeMin }}
          nodeMax: ${{ parameters.nodeMax }}
          nodeDesidered: ${{ parameters.nodeDesidered }}
          enableClusterAutoscaler: ${{ parameters.enableClusterAutoscaler }}
          enableMetricServer: ${{ parameters.enableMetricServer }}
          enableCoredns: ${{ parameters.enableCoredns }}
          enableAwsCni: ${{ parameters.enableAwsCni }}


    # Push files to controlplane repository
    - id: init-controlplane-repo
      name: Initialize controlplane repository
      action: github:repo:push
      input:
        repoUrl: github.com?owner=CNOE-ORG-TEST&repo=${{ parameters.clusterName }}-${{ parameters.environmentTag }}Controlplane&organization=CNOE-ORG-TEST
        defaultBranch: main
        sourcePath: ./applicative-template-compiled/controlplane
        gitCommitMessage: initial commit [skip ci]

    # Push files to dataplane repository
    - id: init-dataplane-repo
      name: Initialize dataplane repository
      action: github:repo:push
      input:
        repoUrl: github.com?owner=CNOE-ORG-TEST&repo=${{ parameters.clusterName }}-${{ parameters.environmentTag }}Dataplane&organization=CNOE-ORG-TEST
        defaultBranch: main
        sourcePath: ./applicative-template-compiled/dataplane
        gitCommitMessage: initial commit [skip ci]

    # Push files to infrplane repository
    - id: init-infrplane-repo
      name: Initialize infrplane repository
      action: github:repo:push
      input:
        repoUrl: github.com?owner=CNOE-ORG-TEST&repo=${{ parameters.clusterName }}-${{ parameters.environmentTag }}Infrplane&organization=CNOE-ORG-TEST
        defaultBranch: main
        sourcePath: ./applicative-template-compiled/infrplane
        gitCommitMessage: initial commit [skip ci]

    # Apply variables-cm
    - id: apply-variables-cm
      name: Apply configmap with variables used from all pipelines
      action: cnoe:kubernetes:apply
      input:
        manifestPath: ./applicative-template-compiled/common-variables/variables.yaml
        namespaced: true
        clusterName: local

    # Waiting for the repo to be ready
    - id: wait
      name: Waiting for the repo to be ready
      action: "roadiehq:utils:sleep"
      input:
        amount: 5

    # Apply controlplane workflow
    - id: apply-controlplane-workflow-template
      name: Apply controlplane workflow template
      action: cnoe:kubernetes:apply
      input:
        manifestPath: ./applicative-template-compiled/workflow/controlplaneWorkflow.yaml
        namespaced: true
        clusterName: local

    # Apply dataplane workflow
    - id: apply-dataplane-workflow-template
      name: Apply dataplane workflow template
      action: cnoe:kubernetes:apply
      input:
        manifestPath: ./applicative-template-compiled/workflow/dataplaneWorkflow.yaml
        namespaced: true
        clusterName: local

    # Apply infrplane workflow
    - id: apply-infrplane-workflow
      name: Apply infrplane workflow
      action: cnoe:kubernetes:apply
      input:
        manifestPath: ./applicative-template-compiled/workflow/infrplaneWorkflow.yaml
        namespaced: true
        clusterName: local

    # create pvc for controlplane
    - id: create-pvc-controlplane
      name: Create pvc for controlplane pipeline
      action: cnoe:kubernetes:apply
      input:
        manifestPath: ./applicative-template-compiled/pvc/controlplane-pvc.yaml
        namespaced: true
        clusterName: local

    # create pvc for controlplane
    - id: create-pvc-dataplane
      name: Create pvc for dataplane pipeline
      action: cnoe:kubernetes:apply
      input:
        manifestPath: ./applicative-template-compiled/pvc/dataplane-pvc.yaml
        namespaced: true
        clusterName: local

    # create pvc for controlplane
    - id: create-pvc-infrplane
      name: Create pvc for infrplane pipeline
      action: cnoe:kubernetes:apply
      input:
        manifestPath: ./applicative-template-compiled/pvc/infrplane-pvc.yaml
        namespaced: true
        clusterName: local

    # Apply main workflow (create cluster)
    - id: apply-main-workflow
      name: Apply main workflow (create cluster)
      action: cnoe:kubernetes:apply
      input:
        manifestPath: ./applicative-template-compiled/workflow/mainWorkflow.yaml
        namespaced: true
        clusterName: local

    # Create backstage component repository
    - id: create-repo-backstage-component
      name: Create Backstage component repository
      action: github:repo:create
      input:
        repoUrl: github.com?owner=CNOE-ORG-TEST&repo=${{ parameters.clusterName }}-${{ parameters.environmentTag }}Component&organization=CNOE-ORG-TEST

    # Push files to backstage component repository
    - id: init-backstage-component-repo
      name: Initialize Backstage component repository
      action: github:repo:push
      input:
        repoUrl: github.com?owner=CNOE-ORG-TEST&repo=${{ parameters.clusterName }}-${{ parameters.environmentTag }}Component&organization=CNOE-ORG-TEST
        defaultBranch: main
        sourcePath: ./applicative-template-compiled/component

    # Register backstage component
    - id: register-backstage-component
      name: Register Backstage component
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps['init-backstage-component-repo'].output.repoContentsUrl }}
        catalogInfoPath: "/cataolog-info-cluster.yaml"

    # Apply infrplane workflow
    #- id: apply-infrplane-workflow
    #  name: Apply infrplane workflow
    #  action: cnoe:kubernetes:apply
    #  input:
    #    manifestPath: ./applicative-template/workflow/infrplaneWorkflow.yaml
    #    namespaced: true
    #    clusterName: local

    #- id: register-controlplane-workflow
    #  name: Register workflow
    #  action: catalog:register
    #  input:
    #    repoContentsUrl: ${{ steps['init-controlplane-repo'].output.repoContentsUrl }}
    #    catalogInfoPath: "/catalog-info-workflow.yaml"

    # - id: register-cd
    #   name: Register cd
    #   action: catalog:register
    #   input:
    #     repoContentsUrl: ${{ steps['init-applicative-repo'].output.repoContentsUrl }}
    #     catalogInfoPath: "/catalog-info-cd.yaml"